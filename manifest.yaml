---
# Source: infra-log-forward/charts/vector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.33.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.38.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
automountServiceAccountToken: true
---
# Source: infra-log-forward/charts/vector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.33.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.38.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
data:
  vector.yaml: |
    api:
      address: 127.0.0.1:8686
      enabled: true
    data_dir: /vector-data-dir
    expire_metrics_secs: 60
    sinks:
      output_httpout_app:
        encoding:
          codec: json
        inputs:
        - output_httpout_app_dedot
        method: post
        type: http
        uri: http://vector.infra-vector.svc.cluster.local:8080
    sources:
      input_app2_integ_container:
        auto_partial_merge: true
        exclude_paths_glob_patterns:
        - /var/log/pods/*/*/*.gz
        - /var/log/pods/*/*/*.log.*
        - /var/log/pods/*/*/*.tmp
        - /var/log/pods/default_*/*/*.log
        - /var/log/pods/kube*_*/*/*.log
        - /var/log/pods/openshift*_*/*/*.log
        glob_minimum_cooldown_ms: 15000
        include_paths_glob_patterns:
        - /var/log/pods/my-projects_*/*/*.log
        max_read_bytes: 3145728
        namespace_annotation_fields:
          namespace_labels: kubernetes.namespace_id
        pod_annotation_fields:
          pod_annotations: kubernetes.annotations
          pod_labels: kubernetes.labels
          pod_namespace: kubernetes.namespace_name
          pod_node_name: hostname
          pod_uid: kubernetes.pod_id
        rotate_wait_secs: 5
        type: kubernetes_logs
      internal_metrics:
        type: internal_metrics
    transforms:
      add_nodename_to_metric:
        inputs:
        - internal_metrics
        source: |
          .tags.hostname = get_env_var!("VECTOR_SELF_NODE_NAME")
        type: remap
      input_app2_integ_container_viaq:
        inputs:
        - input_app2_integ_container
        source: |2
            .openshift.cluster_id = "${OPENSHIFT_CLUSTER_ID:-}"
            if !exists(.level) {
              .level = "default"
              if match!(.message, r'Warning|WARN|^W[0-9]+|level=warn|Value:warn|"level":"warn"|<warn>') {
                .level = "warn"
              } else if match!(.message, r'Error|ERROR|^E[0-9]+|level=error|Value:error|"level":"error"|<error>') {
                .level = "error"
              } else if match!(.message, r'Critical|CRITICAL|^C[0-9]+|level=critical|Value:critical|"level":"critical"|<critical>') {
                .level = "critical"
              } else if match!(.message, r'Debug|DEBUG|^D[0-9]+|level=debug|Value:debug|"level":"debug"|<debug>') {
                .level = "debug"
              } else if match!(.message, r'Notice|NOTICE|^N[0-9]+|level=notice|Value:notice|"level":"notice"|<notice>') {
                .level = "notice"
              } else if match!(.message, r'Alert|ALERT|^A[0-9]+|level=alert|Value:alert|"level":"alert"|<alert>') {
                .level = "alert"
              } else if match!(.message, r'Emergency|EMERGENCY|^EM[0-9]+|level=emergency|Value:emergency|"level":"emergency"|<emergency>') {
                .level = "emergency"
              } else if match!(.message, r'(?i)\b(?:info)\b|^I[0-9]+|level=info|Value:info|"level":"info"|<info>') {
                .level = "info"
              }
            }
            pod_name = string!(.kubernetes.pod_name)
            if starts_with(pod_name, "eventrouter-") {
              parsed, err = parse_json(.message)
              if err != null {
                log("Unable to process EventRouter log: " + err, level: "info")
              } else {
                ., err = merge(.,parsed)
                if err == null && exists(.event) && is_object(.event) {
                    if exists(.verb) {
                      .event.verb = .verb
                      del(.verb)
                    }
                    .kubernetes.event = del(.event)
                    .message = del(.kubernetes.event.message)
                    set(., ["@timestamp"], .kubernetes.event.metadata.creationTimestamp)
                    del(.kubernetes.event.metadata.creationTimestamp)
                    . = compact(., nullish: true)
                } else {
                  log("Unable to merge EventRouter log message into record: " + err, level: "info")
                }
              }
            }
            del(.source_type)
            del(.stream)
            del(.kubernetes.pod_ips)
            del(.kubernetes.node_labels)
            del(.timestamp_end)
            ts = del(.timestamp); if !exists(."@timestamp") {."@timestamp" = ts}
        type: remap
      input_app2_integ_viaq_logtype:
        inputs:
        - input_app2_integ_container_viaq
        source: |2
            .log_type = "application"
        type: remap
      output_httpout_app_dedot:
        inputs:
        - output_httpout_app_normalize
        source: "  .openshift.sequence = to_unix_timestamp(now(), unit: \"nanoseconds\")\n
          \ if exists(.kubernetes.namespace_labels) {\n      for_each(object!(.kubernetes.namespace_labels))
          -> |key,value| { \n        newkey = replace(key, r'[\\./]', \"_\") \n        .kubernetes.namespace_labels
          = set!(.kubernetes.namespace_labels,[newkey],value)\n        if newkey != key
          {\n          .kubernetes.namespace_labels = remove!(.kubernetes.namespace_labels,[key],true)\n
          \       }\n      }\n  }\n  if exists(.kubernetes.labels) {\n      for_each(object!(.kubernetes.labels))
          -> |key,value| { \n        newkey = replace(key, r'[\\./]', \"_\") \n        .kubernetes.labels
          = set!(.kubernetes.labels,[newkey],value)\n        if newkey != key {\n          .kubernetes.labels
          = remove!(.kubernetes.labels,[key],true)\n        }\n      }\n  }\n"
        type: remap
      output_httpout_app_normalize:
        inputs:
        - pipeline_app2_integ_archive_openshiftlabels_0
        source: |2
            del(.file)
        type: remap
      pipeline_app2_integ_archive_openshiftlabels_0:
        inputs:
        - input_app2_integ_viaq_logtype
        source: |2
            .openshift.labels = {"clustername":"integ-app2"}
        type: remap
---
# Source: infra-log-forward/charts/vector/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: vector-headless
  labels:
    helm.sh/chart: vector-0.33.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.38.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
spec:
  clusterIP: None
  ports:    
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    - name: prometheus-output
      port: 24231
      protocol: TCP
      targetPort: 24231
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
  type: ClusterIP
---
# Source: infra-log-forward/charts/vector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.33.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.38.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
spec:
  ports:    
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    - name: prometheus-output
      port: 24231
      protocol: TCP
      targetPort: 24231
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
  type: ClusterIP
---
# Source: infra-log-forward/charts/vector/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.33.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.38.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
    {}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vector
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: Agent
  minReadySeconds: 0
  template:
    metadata:
      annotations:
        checksum/config: 6a211ca6809dc9727f22a53462dcaedaf6f2b3ada7534047041a261c88bb7a28
      labels:
        app.kubernetes.io/name: vector
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: Agent
        vector.dev/exclude: "true"
    spec:
      serviceAccountName: vector
      dnsPolicy: ClusterFirst
      containers:
        - name: vector
          image: "timberio/vector:0.38.0-distroless-libc"
          imagePullPolicy: IfNotPresent
          args:
            - --config-dir
            - /etc/vector/
          env:
            - name: VECTOR_LOG
              value: "info"
            - name: VECTOR_SELF_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: VECTOR_SELF_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VECTOR_SELF_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROCFS_ROOT
              value: "/host/proc"
            - name: SYSFS_ROOT
              value: "/host/sys"
          ports:      
            - name: api
              containerPort: 8686
              protocol: TCP
            - name: prometheus-outp
              containerPort: 24231
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: "/vector-data-dir"
            - name: config
              mountPath: "/etc/vector/"
              readOnly: true
            - mountPath: /var/log/
              name: var-log
              readOnly: true
            - mountPath: /var/lib
              name: var-lib
              readOnly: true
            - mountPath: /host/proc
              name: procfs
              readOnly: true
            - mountPath: /host/sys
              name: sysfs
              readOnly: true
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/disk-pressure
          operator: Exists
        - effect: NoSchedule
          key: app-large
          operator: Exists
        - effect: NoExecute
          key: app-large
          operator: Exists
      volumes:
        - name: config
          projected:
            sources:
              - configMap:
                  name: vector
        - name: data
          hostPath:
            path: "/var/lib/vector"
        - hostPath:
            path: /var/log/
          name: var-log
        - hostPath:
            path: /var/lib/
          name: var-lib
        - hostPath:
            path: /proc
          name: procfs
        - hostPath:
            path: /sys
          name: sysfs
